apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

androidExtensions {
    experimental = true
}

android {
    signingConfigs {
        release {
            try {
                def keystoreProperties = new Properties()
                try {
                    keystoreProperties.load(new FileInputStream(rootProject.file(System.getenv("ACCA_KEYSTORE_PROPERTIES_LOCATION") ?: "keystore.properties")))
                } catch(ignored) {}

                storeFile file(keystoreProperties["ACCA_KEYSTORE_LOCATION"] ?: System.getenv("ACCA_KEYSTORE_LOCATION"))
                storePassword keystoreProperties["ACCA_KEYSTORE_PASSWORD"] ?: System.getenv("ACCA_KEYSTORE_PASSWORD")
                keyAlias keystoreProperties["ACCA_KEY_ALIAS"] ?: System.getenv("ACCA_KEY_ALIAS")
                keyPassword keystoreProperties["ACCA_KEY_PASSWORD"] ?: System.getenv("ACCA_KEY_PASSWORD")
            } catch (ignored) {
                println "You should define ACCA_KEYSTORE_LOCATION, ACCA_KEYSTORE_PASSWORD, ACCA_KEY_ALIAS and ACCA_KEY_PASSWORD in your env variables or in keystore.properties."
            }
        }
    }
    compileSdkVersion 30
    defaultConfig {
        applicationId "mattecarra.accapp"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 37
        versionName "1.0.33"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        signingConfig signingConfigs.release

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        dataBinding true
        viewBinding true
    }
    lintOptions {
        disable 'MissingTranslation'
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // MultiDex
    implementation "androidx.multidex:multidex:$versions.multidex"

    implementation "org.jetbrains.anko:anko-commons:0.10.8"

    implementation "androidx.appcompat:appcompat:1.3.1"
    implementation "androidx.core:core-ktx:1.6.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.vectordrawable:vectordrawable:1.1.0"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.cardview:cardview:1.0.0"

    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'com.afollestad.material-dialogs:input:3.3.0'
    implementation 'com.afollestad.material-dialogs:datetime:3.3.0'

    implementation 'com.google.code.gson:gson:2.8.6'

    implementation "com.github.topjohnwu.libsu:core:$versions.libsuVersion"

    // CircleProgressBar - https://github.com/dinuscxj/CircleProgressBar
    implementation 'com.dinuscxj:circleprogressbar:1.3.0'
    // Tooltip library: https://github.com/sephiroth74/android-target-tooltip
    implementation 'com.github.sephiroth74:android-target-tooltip:2.0.4'

    // CircilarImageView - https://github.com/hdodenhof/CircleImageView
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    implementation 'org.apache.commons:commons-collections4:4.4'

    // Room components
    implementation "androidx.room:room-runtime:$versions.roomVersion"
    implementation "androidx.room:room-ktx:$versions.roomVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
    kapt "androidx.room:room-compiler:$versions.roomVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"

    // Coroutines
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"

    // ViewPager
    // https://developer.android.com/jetpack/androidx/releases/viewpager2
    implementation "androidx.viewpager2:viewpager2:$versions.viewpager"

    // Google Material Components
    implementation "com.google.android.material:material:$versions.material"

    // Custom tabs
    implementation "androidx.browser:browser:$versions.browser"

    // Kotlin JSON Library for exporting and importing
    implementation 'com.squareup.moshi:moshi:1.9.2'
    implementation 'com.squareup.moshi:moshi-kotlin:1.9.2'
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.9.2"

    // Fragment KTX module
    implementation "androidx.fragment:fragment-ktx:1.3.6"

}
